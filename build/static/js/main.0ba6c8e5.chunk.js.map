{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","notesToShow","filter","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","message","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Math","random","value","onChange","target","type","style","color","fontStyle","fontSize","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"6MAYeA,EAXF,SAAHC,GAAmC,IAA7BC,EAAID,EAAJC,KAAMC,EAAgBF,EAAhBE,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXP,EAAKQ,QACNJ,EAAAC,EAAAC,cAAA,UAAQG,QAASR,GAAmBC,aCW3BQ,EAfA,WAEb,OADgBC,IAAMC,IAHR,cAICC,KAAK,SAACC,GAAQ,OAAKA,EAASC,QAa9BL,EAVA,SAACM,GAEd,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,KAAK,SAACC,GAAQ,OAAKA,EAASC,QAQ9BL,EALA,SAACQ,EAAIF,GAElB,OADgBL,IAAMQ,IAAG,GAAAC,OAbX,aAasB,KAAAA,OAAIF,GAAMF,GAC/BH,KAAK,SAACC,GAAQ,OAAKA,EAASC,QCkG9BM,SA1GH,SAACC,GAAU,IAAAC,EACKC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA/BK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAAAK,EACQN,mBAAS,iBAAgBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAhDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAAAG,EACIV,oBAAS,GAAKW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,EAAcF,EAAUR,EAAQA,EAAMW,OAAO,SAACvC,GAAI,OAAKA,EAAKG,YAAWqC,EACrChB,mBAAS,0BAAyBiB,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAAnEE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GA+BpCG,oBAAU,WACRC,QAAQC,IAAI,UACZC,IAAqBlC,KAAK,SAACmC,GACzBH,QAAQC,IAAI,qBACZjB,EAASmB,MAEV,IAEHH,QAAQC,IAAI,SAAUlB,EAAMqB,OAAQ,SAiCpC,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAI,SACJF,EAAAC,EAAAC,cAzEiB,SAAHP,GAAoB,IAAdmD,EAAOnD,EAAPmD,QACtB,OAAgB,OAAZA,EACK,KAGF9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAS2C,IAoEhB,CAACA,QAASR,IACvBtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAM4B,GAAYD,KAAU,QACrCA,EAAU,YAAc,QAGlChC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACGgC,EAAYa,IAAI,SAACnD,GAAI,OACpBI,EAAAC,EAAAC,cAAC8C,EAAI,CACHC,IAAKrD,EAAKkB,GACVlB,KAAMA,EACNC,iBAAkB,kBA7EH,SAACiB,GAC1B2B,QAAQC,IAAG,iBAAA1B,OAAkBF,EAAE,yBACtB,+BAAAE,OAAkCF,GAA3C,IACMlB,EAAO4B,EAAM0B,KAAK,SAACC,GAAC,OAAKA,EAAErC,KAAOA,IAClCsC,EAAW9B,OAAA+B,EAAA,EAAA/B,CAAA,GAAQ1B,EAAI,CAAEG,WAAYH,EAAKG,YAEhD4C,EACU7B,EAAIsC,GACX3C,KAAK,SAAC6C,GACL7B,EAASD,EAAMuB,IAAI,SAACnD,GAAI,OAAMA,EAAKkB,KAAOA,EAAKlB,EAAO0D,OAEvDC,MAAM,SAACC,GACNjB,EAAe,SAAAvB,OACJpB,EAAKQ,QAAO,sCAEvBqD,WAAW,WACTlB,EAAgB,OACf,OA4D2BmB,CAAmB9D,EAAKkB,UAItDd,EAAAC,EAAAC,cAAA,QAAMyD,SA7CI,SAACC,GAEfA,EAAMC,iBACN,IAAMC,EAAa,CACjB1D,QAASwB,EACT7B,UAAWgE,KAAKC,SAAW,IAE7BrB,EAAmBmB,GAAYrD,KAAK,SAAC6C,GACnC7B,EAASD,EAAMR,OAAOsC,IACtBzB,EAAW,QAqCP7B,EAAAC,EAAAC,cAAA,SAAO+D,MAAOrC,EAASsC,SAnDN,SAACN,GACxBnB,QAAQC,IAAIkB,EAAMO,OAAOF,OACzBpC,EAAW+B,EAAMO,OAAOF,UAkDlBjE,EAAAC,EAAAC,cAAA,UAAQkE,KAAK,UAAS,UAG1BpE,EAAAC,EAAAC,cAtCW,WAMb,OACEF,EAAAC,EAAAC,cAAA,OAAKmE,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIRxE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAI,wCA6BC,SCvGbK,IAAMC,IAAI,+BAA+BC,KAAK,SAACC,GAC7C,IAAMc,EAAQd,EAASC,KACvB8B,QAAQC,IAAIlB,KAGdiD,IAASC,WAAWC,SAASC,eAAe,SAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAG","file":"static/js/main.0ba6c8e5.chunk.js","sourcesContent":["import React from 'react';\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import Note from './components/Note';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport React from 'react';\nimport noteService from './services/notes';\nimport './index.css';\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n  const [errorMessage, setErrorMessage] = useState('some error happened...');\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null;\n    }\n\n    return <div className=\"error\">{message}</div>;\n  };\n\n  const toggleImportanceOf = (id) => {\n    console.log(`importance of ${id} needs to be toggled`);\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n  };\n\n  useEffect(() => {\n    console.log('effect');\n    noteService.getAll().then((initialNotes) => {\n      console.log('promise fulfilled');\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  console.log('render', notes.length, 'notes');\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const addNote = (event) => {\n    // below line is to prevent page refresh after form submission\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      important: Math.random() < 0.5,\n    };\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n  const Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16,\n    };\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Rhushabh Bontapalle 2023</em>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        <ul>\n          {notesToShow.map((note) => (\n            <Note\n              key={note.id}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          ))}\n        </ul>\n        <form onSubmit={addNote}>\n          <input value={newNote} onChange={handleNoteChange} />\n          <button type=\"submit\">save</button>\n        </form>\n      </ul>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\nimport React from 'react';\nimport App from './App';\nimport axios from 'axios';\n\naxios.get('http://localhost:3001/notes').then((response) => {\n  const notes = response.data;\n  console.log(notes);\n});\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\n"],"sourceRoot":""}